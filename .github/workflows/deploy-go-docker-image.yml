name: Deploy Go Docker Image
on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string
        description: The stage to deploy to (production, staged)
      githubImage:
        required: true
        type: string
        description: The stage to deploy to (email-service/email-api)
      dockerTag:
        required: true
        type: string
        description: The docker tag for the stage to deploy to ("prod", "staged")
      releaseTag:
        required: true
        type: string
        description: The git tag that will be deployed
      herokuApp:
        required: true
        type: string
        description: The stage to deploy to (prod-email-service, staged-email-service)
      repository:
        required: true
        type: string
        description: anime-skip/<repo-name>, just pass github.repository
      version:
        required: true
        type: string
        description: The new version that is getting deployed (1.2.5, 0.4.0, etc.)
      grafanaAppName:
        required: true
        type: string
        description: The name of the app to be displayed in the release annotation on grafana (either "repo-name" or "repo-name/package-name")
    secrets:
      bugsnagApiKey:
        required: true
      herokuApiKey:
        required: true
      herokuEmail:
        required: true

jobs:
  deploy:
    name: Deploy (${{ inputs.stage }})
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v1
        with:
          ref: ${{ inputs.releaseTag }}
          fetch-depth: 0

      - run: |
          echo ${{ secrets.herokuEmail }}
          echo ${{ secrets.herokuApiKey }}

      - name: Log into Heroku CLI
        uses: akhileshns/heroku-deploy@v3.7.8
        with:
          heroku_api_key: ${{ secrets.herokuApiKey }}
          heroku_app_name: ""
          heroku_email: ${{ secrets.herokuEmail }}
          justlogin: true

      - name: Log into Heroku Docker Registry
        uses: docker/login-action@v1
        with:
          registry: registry.heroku.com
          username: ${{ secrets.herokuEmail }}
          password: ${{ secrets.herokuApiKey }}

      - name: Log into Github Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Details
        id: details
        run: |
          VERSION="${{ inputs.version }}-$(TZ=UTC git --no-pager show --quiet --abbrev=12 --date='format-local:%Y%m%d%H%M%S' --format='%cd-%h')"
          COMMIT_SHA="$(git rev-parse --verify HEAD)"

          echo "::set-output name=simple_version::$SIMPLE_VERSION"
          echo "::set-output name=version::$VERSION"
          echo "::set-output name=commit_sha::$COMMIT_SHA"
          echo "::set-output name=github_image_latest::docker.pkg.github.com/anime-skip/${{ inputs.githubImage }}:${{ inputs.dockerTag }}"
          echo "::set-output name=github_image_archived::docker.pkg.github.com/anime-skip/${{ inputs.githubImage }}:${{ inputs.version }}"
          echo "::set-output name=heroku_image_deployed::registry.heroku.com/${{ inputs.herokuApp }}/web"

      - name: Build :${{ inputs.dockerTag }}
        run: |
          docker build . \
            --build-arg VERSION=${{ steps.details.outputs.version }} \
            --build-arg STAGE=${{ inputs.stage }} \
            -t ${{ steps.details.outputs.github_image_latest }} \
            -t ${{ steps.details.outputs.github_image_archived }} \
            -t ${{ steps.details.outputs.heroku_image_deployed }}

      - name: Push Image
        run: |
          docker push ${{ steps.details.outputs.github_image_latest }}
          docker push ${{ steps.details.outputs.github_image_archived }}
          docker push ${{ steps.details.outputs.heroku_image_deployed }}

      - name: Deploy :${{ inputs.dockerTag }}
        run: |
          heroku container:release -a ${{ inputs.herokuApp }} web

      - name: Notify Bugsnag Sources
        uses: anime-skip/github-actions/.github/actions/bugsnag-report-go-release@v8
        with:
          apiKey: ${{ secrets.bugsnagApiKey }}
          version: ${{ steps.details.outputs.version }}
          commitHash: ${{ steps.details.outputs.commit_sha }}
          releaseStage: ${{ inputs.stage }}
          builderName: ${{ github.actor }}
          repository: ${{ inputs.repository }}

      - name: Add Release to Grafana
        uses: anime-skip/github-actions/.github/actions/grafana-release-annotation@v8
        with:
          version: ${{ steps.details.outputs.version }}
          repository: ${{ inputs.repository }}
          tag: ${{ inputs.releaseTag }}
          commitHash: ${{ steps.details.outputs.commit_sha }}
          appName: ${{ inputs.grafanaAppName }}
